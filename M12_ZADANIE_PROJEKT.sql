--1
--SELECT * FROM expense_tracker.users
CREATE EXTENSION pgcrypto SCHEMA expense_tracker;
ALTER TABLE expense_tracker.users DROP COLUMN password_salt;
UPDATE expense_tracker.users 
SET user_password = crypt(user_password, gen_salt('md5'));

--2
--a)
SELECT TABLE_NAME
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC2
WHERE CONSTRAINT_SCHEMA = 'expense_tracker'
AND CONSTRAINT_TYPE = 'FOREIGN KEY';

SELECT 'bank_account_types' as table, count(*)
FROM expense_tracker.bank_account_types 
WHERE id_ba_type = -1
union all
SELECT 'transaction_bank_accounts' as table, count(*)
FROM expense_tracker.transaction_bank_accounts 
WHERE id_trans_ba = -1
union all
SELECT 'transaction_subcategory' as table,count(*)
FROM expense_tracker.transaction_subcategory
WHERE id_trans_subcat = -1
union all
SELECT 'transactions' as table,count(*)
FROM expense_tracker.transactions
WHERE id_transaction = -1;

--b) 
WITH expense_tracker_nulls as
	(SELECT count(*) * 
	 (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_schema = 'expense_tracker' AND table_name = 'transactions') AS number_of_rows,
	   SUM(CASE WHEN id_transaction IS NULL THEN 1 ELSE 0 END) + 
	   SUM(CASE WHEN id_trans_ba IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN id_trans_cat IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN id_trans_subcat IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN id_trans_type IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN id_user IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN transaction_date IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN transaction_value IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN transaction_description IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN insert_date IS NULL THEN 1 ELSE 0 END) +
	   SUM(CASE WHEN update_date IS NULL THEN 1 ELSE 0 END) AS number_of_NULL
	FROM expense_tracker.transactions t)
SELECT  number_of_rows,
		number_of_NULL,
		cast(number_of_NULL as float) / number_of_rows *100 AS procent_of_NULL
FROM expense_tracker_nulls;


--3
--osobny schemat dla każdej rodziny
--wykorzystanie pgcrypto do zaszyfrowania haseł
--zastosowanie wniosków z modułu 6:
--wykorzystanie boolean
--transaction_bank_accounts i bank_account_types - tabele te połączyłabym w jedną (przy takiej ilości danych rozbicie uważam za nadmiarowe)
-- + partycjonowanie tabeli transactions dla każdego roku
-- + stworzenie indeksów

--4
--schemat
drop schema if exists expense_tracker cascade;
create schema if not exists expense_tracker; 

--tabele
DROP EXTENSION IF EXISTS pgcrypto;
CREATE EXTENSION pgcrypto;

DROP TABLE IF EXISTS EXPENSE_TRACKER.USERS CASCADE;
CREATE TABLE EXPENSE_TRACKER.USERS(ID_USER serial PRIMARY KEY,
USER_LOGIN VARCHAR(25) NOT NULL,
USER_NAME VARCHAR(50) NOT NULL,
USER_PASSWORD VARCHAR(100) NOT NULL,
ACTIVE boolean DEFAULT TRUE NOT NULL,
INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

DROP TABLE IF EXISTS EXPENSE_TRACKER.BANK_ACCOUNT_OWNER CASCADE;
CREATE TABLE EXPENSE_TRACKER.BANK_ACCOUNT_OWNER(
ID_BA_OWN serial PRIMARY KEY,
ID_USER int, 
ACTIVE boolean DEFAULT TRUE NOT NULL,
INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY(ID_USER) REFERENCES EXPENSE_TRACKER.USERS(ID_USER));

DROP TABLE IF EXISTS EXPENSE_TRACKER.BANK_ACCOUNT_TYPES CASCADE;
CREATE TABLE IF NOT EXISTS EXPENSE_TRACKER.BANK_ACCOUNT_TYPES(
ID_BA_TYPE serial PRIMARY KEY,
BA_TYPE VARCHAR(50) NOT NULL,
BA_DESC VARCHAR(250),
BANK_ACCOUNT_DESC VARCHAR(250),
ACTIVE boolean DEFAULT TRUE NOT NULL,
IS_COMMON_ACCOUNT boolean DEFAULT TRUE NOT NULL,
ID_BA_OWN integer, 
INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT BANK_ACOUNT_TYPES_BANK_ACCOUNT_OWNER_FK
FOREIGN KEY(ID_BA_OWN) REFERENCES EXPENSE_TRACKER.BANK_ACCOUNT_OWNER(ID_BA_OWN));


DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTION_TYPE CASCADE;
CREATE TABLE IF NOT EXISTS EXPENSE_TRACKER.TRANSACTION_TYPE(
ID_TRANS_TYPE serial PRIMARY KEY,
TRANSACTION_TYPE_NAME VARCHAR(50) NOT NULL,
TRANSACTION_TYPE_DESC VARCHAR(250),
ACTIVE boolean DEFAULT TRUE NOT NULL,
INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTION_CATEGORY CASCADE;
CREATE TABLE IF NOT EXISTS EXPENSE_TRACKER.TRANSACTION_CATEGORY(
ID_TRANS_CAT serial PRIMARY KEY,
CATEGORY_NAME VARCHAR(50) NOT NULL,
CATEGORY_DESCRIPTION VARCHAR(250),
ACTIVE boolean DEFAULT TRUE NOT NULL,
INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTION_SUBCATEGORY CASCADE;
CREATE TABLE IF NOT EXISTS EXPENSE_TRACKER.TRANSACTION_SUBCATEGORY(
ID_TRANS_SUBCAT serial PRIMARY KEY,
ID_TRANS_CAT integer, SUBCATEGORY_NAME VARCHAR(50) NOT NULL,
SUBCATEGORY_DESCRIPTION VARCHAR(250),
ACTIVE boolean DEFAULT TRUE NOT NULL,
INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (ID_TRANS_CAT) REFERENCES EXPENSE_TRACKER.TRANSACTION_CATEGORY(ID_TRANS_CAT));

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED;
CREATE TABLE EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED (
ID_TRANSACTION serial, 
ID_TRANS_BA integer, 
ID_TRANS_CAT integer, 
ID_TRANS_SUBCAT integer, 
ID_TRANS_TYPE integer, 
ID_USER integer, 
TRANSACTION_DATE date DEFAULT CURRENT_DATE,
TRANSACTION_VALUE NUMERIC(9,2),
TRANSACTION_DESCRIPTION text, INSERT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
UPDATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (ID_TRANSACTION,TRANSACTION_DATE),
CONSTRAINT TRANSACTIONS_PARTITIONED_TRANSACTION_BANK_ACCOUNT_FK
FOREIGN KEY(ID_TRANS_BA) REFERENCES EXPENSE_TRACKER.BANK_ACCOUNT_TYPES (ID_BA_TYPE),
CONSTRAINT TRANSACTIONS_PARTITIONED_TRANSACTION_CATEGORY_FK
FOREIGN KEY(ID_TRANS_CAT) REFERENCES EXPENSE_TRACKER.TRANSACTION_CATEGORY(ID_TRANS_CAT),
CONSTRAINT TRANSACTIONS_PARTITIONED_TRANSACTION_SUBCATEGORY_FK
FOREIGN KEY(ID_TRANS_SUBCAT) REFERENCES EXPENSE_TRACKER.TRANSACTION_SUBCATEGORY(ID_TRANS_SUBCAT),
CONSTRAINT TRANSACTIONS_PARTITIONED_TRANSACTION_TYPE_FK
FOREIGN KEY(ID_TRANS_TYPE) REFERENCES EXPENSE_TRACKER.TRANSACTION_TYPE(ID_TRANS_TYPE),
CONSTRAINT TRANSACTIONS_PARTITIONED_USERS_FK
FOREIGN KEY(ID_USER) REFERENCES EXPENSE_TRACKER.USERS(ID_USER) )PARTITION BY RANGE(TRANSACTION_DATE); 
  
DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2015;
CREATE TABLE TRANSACTIONS_YR2015 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2015-01-01') TO ('2016-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2016;
CREATE TABLE TRANSACTIONS_YR2016 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2016-01-01') TO ('2017-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2017;
CREATE TABLE TRANSACTIONS_YR2017 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2017-01-01') TO ('2018-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2018;
CREATE TABLE TRANSACTIONS_YR2018 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2018-01-01') TO ('2019-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2019;
CREATE TABLE TRANSACTIONS_YR2019 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2019-01-01') TO ('2020-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2020;
CREATE TABLE TRANSACTIONS_YR2020 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2020-01-01') TO ('2021-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2021;
CREATE TABLE TRANSACTIONS_YR2021 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2021-01-01') TO ('2022-01-01');

DROP TABLE IF EXISTS EXPENSE_TRACKER.TRANSACTIONS_YR2022;
CREATE TABLE TRANSACTIONS_YR2022 PARTITION OF EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED
FOR
VALUES FROM ('2022-01-01') TO ('2023-01-01');

--indeksy
CREATE INDEX IDX_TRANSACTION_YEAR ON EXPENSE_TRACKER.TRANSACTIONS (EXTRACT (YEAR FROM TRANSACTION_DATE));
CREATE INDEX IDX_TRANSACTION_CATEGORY_NAME ON EXPENSE_TRACKER.TRANSACTION_CATEGORY (CATEGORY_NAME);
CREATE INDEX IDX_SUBCATEGORY_NAME ON EXPENSE_TRACKER.TRANSACTION_SUBCATEGORY(SUBCATEGORY_NAME);

--uprawnienia, role
CREATE ROLE USERS;
REVOKE CREATE ON SCHEMA PUBLIC FROM PUBLIC;
REVOKE ALL ON DATABASE POSTGRES FROM PUBLIC;
GRANT USAGE ON SCHEMA EXPENSE_TRACKER TO USERS;
CREATE ROLE USER1 WITH LOGIN PASSWORD 'user1';
CREATE ROLE USER2 WITH LOGIN PASSWORD 'user2';
GRANT USER1 TO USERS;
GRANT USER2 TO USERS;
GRANT SELECT,INSERT,UPDATE,DELETE ON TABLE EXPENSE_TRACKER.TRANSACTIONS_PARTITIONED TO USERS;
GRANT UPDATE(USER_PASSWORD, USER_LOGIN) ON TABLE EXPENSE_TRACKER.USERS TO USERS;
DROP ROLE IF EXISTS ADMIN_GROUP;
CREATE ROLE ADMIN_GROUP;
GRANT ALL PRIVILEGES ON SCHEMA EXPENSE_TRACKER TO ADMIN_GROUP;
CREATE ROLE EXPENSE_TRACKER_ADMIN WITH LOGIN PASSWORD 'HE5pZgrRZw';
GRANT EXPENSE_TRACKER_ADMIN TO EXPENSE_TRACKER_ADMIN_GROUP;